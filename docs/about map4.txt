这Mapper一共4寄存器：

8000h-9FFFh 寄存器0 ->这寄存器用来设置后面3个寄存器PROM/VROM模式，状态等
A000h-BFFFh 寄存器1 ->这寄存器用来设置VROM 4KB/8KB 模式，超过256K PRG ROM可以使用位4扩大PRG容量
C000h-DFFFh 寄存器2 ->这寄存器用来设置VROM 4KB 模式，超过256K PRG ROM可以使用位4扩大PRG容量
E000h-FFFFh 寄存器3 ->这寄存器用来写入PROM 的编号，只使用位0-位3（有效值 0-F）

8000h-9FFFh 寄存器0

     位0 - 1名称表镜像

       0,1单屏（ 仅BLK0）

       2    双屏幕垂直镜像

       3    双屏幕水平镜像

     位2 - 3是PRG模式选择开关（通常是3 ）

       0,1 32KB PROM 模式开关 8000h - FFFFh （通过寄存器3 写入程序页码）

       2    16KB PROM 模式开关 C000h - FFFFh （通过寄存器3 写入程序页码）

            同时固定16KB PROM 映射于8000h - BFFFh （总是第一个16KB ）

       3    16KB PROM 到 8000h - BFFFh （通过寄存器3 写入程序页码）

           16KB存储体 C000h - FFFFh （小于等于256KB卡的存储体为最后一个16KB,大于256KB卡没有固定的存储体 ）

     位4   VROM 4KB/8KB 模式开关（为了带VROM的盒卡 ）

       0    设8K的VROM在PPU 0000h    （通过寄存器1-2 写入VROM页码）

       1    设4K的VROM在PPU 0000h和1000h （通过寄存器1-2 写入VROM页码）

   A000h-BFFFh 寄存器1

     位4-0选择4K或8K VROM(bank)在0000h （ 4K和8K模式，受寄存器0的位4 影响）

   C000h-DFFFh 寄存器2

     位4-0选择4K VROM(bank)在1000h （只使用在4K模式，受寄存器0的位4 影响）

   E000h-FFFFh 寄存器3

    位3-0选择16KB或2x16K(bank)（受寄存器0的位3-位2 影响） 映射于8000h-BFFFh/8000h-FFFFh

     位4   未明？

最初，第一和最后的16KB映射到8000h和C000h 。

在32K模块PRG和8K VROM模式，(bank)号码按步骤2 。

寄存器3只限于16个16KB的bank(寄存器3只用位0-位3，有效值0-F)，盒带超过256K PRG ROM使用寄存器0,1,2的位4扩大PRG容量：

寄存器0,位 4

   <1024K 盒带>

     0 =关闭256K选择寄存器1 即：PROM <=256 KB

     1 =开启256K选择寄存器1 即：PROM <=1024 KB

寄存器1 ， 位4 - 256KROM选择寄存器0

   <512K盒带>

    0 =互换(bank) PRG第一256K 即：PROM $00010h-4000Fh

    1 =互换(bank) PRG第二256K 即：PROM $40010h-8000Fh

   <1024K盒带 寄存器0的位4 关闭>

    0 =互换(bank) PRG第一256K 即：PROM $00010h-4000Fh

    1 =互换(bank) PRG第三256K 即：PROM $C0010h-10000Fh

   <1024K盒带有寄存器0的位4 开启>

    低位的256K PRG(bank)选择

寄存器2 ， 位4 - 256K PRG选择寄存器1

   <1024K盒带有寄存器0的位4 关闭>

    存储，但忽略此位（基于256K选择256K选择寄存器0 ）

   <1024K盒带有寄存器0的位4 开启>

    高位的256K PRG (bank)选择


翻译：曹老师

整理：伪*七枷社
---------------------------

$8000: [CP.. .AAA]
    C = CHR mode select (see CHR setup)
    P = PRG mode select (see PRG setup)
    A = Address for use with $8001

$8000h ->用于切bank的端口控制寄存器

D7位用于图库地址的选择，(0＝正常，1＝地址异或1000h)

D6位用于程序体选择，为6的时候，0＝8000h-9FFF(即8000：$06),1=C000h-DFFFh(即8000：$46)

D2-D0位用于CPU,PPU映射段数值(即值=00-07)

//0-设2*1K VROM 到PPU 的0000h-07FFh (或者当8000：$80的时候为 1000h-17FFh）

//1-设2*1K VROM 到PPU 的0800h-0FFFh (或者当8000：$81的时候为 1800h-1FFFh）

//2-设1K VROM 到PPU 的1000h-13FFh (或者当8000：$82的时候为 0000h-03FFh)

//3-设1K VROM 到PPU 的1400h-17FFh (或者当8000：$83的时候为 0400h-07FFh)

//4-设1K VROM 到PPU 的1800h-1BFFh (或者当8000：$84的时候为 0800h-0BFFh)

//5-设1K VROM 到PPU 的1C00h-1FFFh (或者当8000：$85的时候为 0C00h-0FFFh)

//6-设8K PROM 到CPU 的8000h-9FFFh (或者当8000：$46的时候为 C000h-DFFFh)

//7-设8K PROM 到CPU 的A000h-BFFFh

//当D6位＝0，驻留体为C000－DFFF，D6位＝1，驻留体为8000h－9FFFh

//最后一个PROM 映射到E000h-FFFFh (E000－FFFF是永远的驻留体)
----------------------------------------------------------------------

$8001: [DDDD DDDD] -- data port
      R:0 -> CHR reg 0
      R:1 -> CHR reg 1
      R:2 -> CHR reg 2
      R:3 -> CHR reg 3
      R:4 -> CHR reg 4
      R:5 -> CHR reg 5
      R:6 -> PRG reg 0
      R:7 -> PRG reg 1

//8001h ->写入你要切换PROM或者VROM的体号:00－FF (先通过8000h的Bit2-0设置,再写入)

---------------------------------------------------------------------------------

$A000: [.... ...M]
    Mirroring: 0=Vert
                1=Horz

//A000h ->镜面H，V接法，0为H，1为V

-------------------------------------

$A001: [EW.. ....]
    E = Enable WRAM (0=disabled, 1=enabled)
    W = WRAM write protect (0=writable, 1=not writable)

//A001h ->打开，关闭6000－7FFF(sram)的开关，0为关闭，$80为打开

----------------------------------------------------------------

$C000: [IIII IIII]    IRQ Reload value
$C001: [.... ....]    IRQ Clear
$E000: [.... ....]    IRQ Acknowledge / Disable
$E001: [.... ....]    IRQ Enable

//C000h ->可屏蔽中断的计数器

//C001h ->可屏蔽中断的暂存器

//E000h ->写入任何数，首先关闭IRQ，然后从暂存器中取出数开始计数,进入IRQ

//E001h ->写入任何数，允许IRQ（退出IRQ，允许下一个IRQ进来）

-------------------------------------------------------------------------------------------------

PS：以下切换程序断操作指令：

LDA #$06 //定义切换地址断为$8000-9FFF

STA $8000 //略

LDA #$01 //把程序断编号01切换到$8000-9FFF

STA $8001 //嗯，完成

由于Mapper 4每次切8KB数据，那么，从编号00= $0010-200F算起,上面的程序是把$2010-400F的数据切换到CPU的

$8000-9FFF上面。

对于图库的切换，等以后做汉化的时候，再说吧……

